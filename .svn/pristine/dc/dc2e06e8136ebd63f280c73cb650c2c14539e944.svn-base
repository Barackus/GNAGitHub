#ifndef MATRIX_H
#define MATRIX_H

#include <iostream>
#include <sstream>

#include "tensor.h"

/**
 * 
 **/
template<typename T>
class Matrix : public Tensor<T> {
public:
	Matrix(int, int);
	Matrix(const Tensor<T>&);
	std::string toString(void) const;
public:
	const int getNumColumns(void) const;
	const int getNumRows(void) const;
public:
	Matrix<T>& transpose(void);
	T determinant(void) const;	// TODO
	void loadIdentity(const int);
public:
	Matrix<T>& multiply(const Matrix<T>&);
	static Matrix<T> multiply(const Matrix<T>&, const Matrix<T>&);
public:
	Matrix<T>& operator*=(const Tensor<T>&);
	Matrix<T> operator*(const Tensor<T>&);
public:
	friend std::ostream& operator<<(std::ostream& out, const Matrix<T>& m){
		out << m.toString();
        return out;
    }
};

/**
 * 
 **/
template<typename T>
Matrix<T>::Matrix(int w, int h)
	:	Tensor<T>(2, w, h) {}

/**
 * 
 **/
template<typename T>
Matrix<T>::Matrix(const Tensor<T>& other)
	:	Tensor<T>(other) {}

/**
 * 
 **/
template<typename T>
std::string Matrix<T>::toString(void) const {
	std::stringstream ss;
	ss << "[ ";
	for(int y = 0; y < _dim[1]; ++y) {
		ss << (y == 0 ? "" : "  ") << "[ ";
		for(int x = 0; x < _dim[0]; ++x) {
			ss << get(x, y) << " ";
		}
		ss << "]";
		if(y < _dim[1] - 1)
			ss << endl;
	}
	ss << " ]";
	return ss.str();
}

/**
 * 
 **/
template<typename T>
const int Matrix<T>::getNumColumns(void) const {
	return _dim[0];
}

/**
 * 
 **/
template<typename T>
const int Matrix<T>::getNumRows(void) const {
	return _dim[1];
}

/**
 * 
 **/
template<typename T>
Matrix<T>& Matrix<T>::transpose(void) {
	int w = _dim[0], h = _dim[1];
	Matrix<T> tmp(h, w);
	for(int y = 0; y < h; ++y)
		for(int x = 0; x < w; ++x)
			tmp.set(get(x, y), y, x);
	*this = tmp;
	return *this;
}

/**
 * 
 **/
template<typename T>
void Matrix<T>::loadIdentity(const int n) {
	_dim[0] = n, _dim[1] = n;
	_data.resize(n * n);
	fill(0);
	for(int i = 0; i < n; ++i)
		set(1, i, i);
}

/**
 * 
 **/
template<typename T>
Matrix<T>& Matrix<T>::multiply(const Matrix<T>& m) {
	// Scale or outer product.
	if(m.isScalar())
		scale(m);
	// Cannot store Matrix in a Vector.
	else if(m.isVector())
		throw;
	else
		*this = Matrix<T>::multiply(*this, m);
	// Return ourselves.
	return *this;
}

/**
 * 
 **/
template<typename T>
Matrix<T> Matrix<T>::multiply(const Matrix<T>& a, const Matrix<T>& b) {
	// Matrix multiplication.
	if((a.isMatrix() || a.isVector()) && (b.isMatrix() || b.isVector())) {
		int h = a.getNumRows(), j = a.getNumColumns(), w = b.getNumColumns();
		// Check dimensions.
		if(j != b.getNumRows())
			throw;
		// Multiply.
		Matrix<T> c(w, h);
		for(int y = 0; y < h; ++y)
			for(int x = 0; x < w; ++x)
				for(int i = 0; i < j; ++i)
					c.set(c.get(x, y) + a.get(i, y) * b.get(x, i), x, y);
		// Pass on the result.
		return c;
	} else
		throw;
}
template<typename T>
Matrix<T> multiply(const Matrix<T>& a, const Matrix<T>& b) {
	return Matrix<T>::multiply(a, b);
}

/**
 * 
 **/
template<typename T>
Matrix<T>& Matrix<T>::operator*=(const Tensor<T>& t) {
	multiply(t);
	return *this;
}

/**
 * 
 **/
template<typename T>
Matrix<T> Matrix<T>::operator*(const Tensor<T>& t) {
	return t.isScalar() ? scale(*this, t) : multiply(*this, t);
}

#endif