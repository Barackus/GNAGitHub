#ifndef VECTOR_H
#define VECTOR_H

#include "matrix.h"

/**
 * 
 **/
template<typename T>
class Vector : public Matrix<T> {
public:
	Vector(int);
	Vector(const Tensor<T>&);
public:
	const bool isColumnVector(void) const;
	const bool isRowVector(void) const;
	const T magnitude(void) const;
public:
	const T get(int) const;
	void set(const T, int);
public:
	const Vector<T>& normalize(void);
	const T angle(const Vector<T>&) const;
	const T inner(const Vector<T>&) const;
	const T dot(const Vector<T>&) const;
	const Vector<T>& outer(const Vector<T>&);
	const Vector<T>& cross(const Vector<T>&);
	static const Vector<T> normalize(const Vector<T>&);
	static const T angle(const Vector<T>&, const Vector<T>&);
	static const T inner(const Vector<T>&, const Vector<T>&);
	static const T dot(const Vector<T>&, const Vector<T>&);
	static const Vector<T> outer(const Vector<T>&, const Vector<T>&);
	static const Vector<T> cross(const Vector<T>&, const Vector<T>&);
};

/**
 * 
 **/
template<typename T>
Vector<T>::Vector(int d)
	:	Matrix<T>(1, d) {}

/**
 * 
 **/
template<typename T>
Vector<T>::Vector(const Tensor<T>& other)
	:	Matrix<T>(other) {
	// Only allow Vectors.
	if(!other.isVector())
		throw;
}

/**
 * 
 **/
template<typename T>
const bool Vector<T>::isColumnVector(void) const {
	return _dim[0] == 1;
}

/**
 * 
 **/
template<typename T>
const bool Vector<T>::isRowVector(void) const {
	return _dim[1] == 1;
}

/**
 * 
 **/
template<typename T>
const T Vector<T>::magnitude(void) const {
	int len = getSize();
	T mag = 0, t;
	for(int i = 0; i < len; ++i) {
		t = get(i);
		mag += t * t;
	}
	return sqrt(mag);	// FIXME: Handle integers.
}

/**
 * 
 **/
template<typename T>
const T Vector<T>::get(int index) const {
	if(_dim[0] == 1) {
		return Tensor<T>::get(0, index);
	} else if(_dim[1] == 1) {
		return Tensor<T>::get(index, 0);
	} else 
		throw;
}

/**
 * 
 **/
template<typename T>
void Vector<T>::set(const T value, int index) {
	if(_dim[0] == 1) {
		Tensor<T>::set(value, 0, index);
	} else if(_dim[1] == 1) {
		Tensor<T>::set(value, index, 0);
	} else 
		throw;
}

/**
 * 
 **/
template<typename T>
const Vector<T>& Vector<T>::normalize(void) {
	if(isNil()) {
		fill(0);
		set(1, 0);
	} else {
		Scalar<T> mag;
		mag.set(magnitude());
		*this /= mag;
	}
	return *this;
}

/**
 * 
 **/
template<typename T>
const T Vector<T>::angle(const Vector<T>& v) const {
	return acos(dot(*this, v) / (this->magnitude() * v.magnitude()));
}

/**
 * 
 **/
template<typename T>
const T Vector<T>::inner(const Vector<T>& v) const {
	if(hasSameDimensions(v)) {
		int len = getSize();
		T t = 0;
		for(int i = 0; i < len; ++i)
			t += get(i) * v.get(i);
		return t;
	} else
		throw;
}

/**
 * 
 **/
template<typename T>
const T Vector<T>::dot(const Vector<T>& v) const {
	return inner(v);
}

/**
 * 
 **/
template<typename T>
const Vector<T>& Vector<T>::outer(const Vector<T>& v) {
	return Matrix<T>::multiply(v);
}

/**
 * 
 **/
template<typename T>
const Vector<T>& Vector<T>::cross(const Vector<T>& v) {
	// Cross product only allowed for Vectors of length 3 (forget 7).
	if(getSize() != 3 || v.getSize() != 3)
		throw;
	// Cross-produce :-P
	Vector<T> t(*this);
	set((t.get(1) * v.get(2)) - (t.get(2) * v.get(1)), 0);
	set((t.get(2) * v.get(0)) - (t.get(0) * v.get(2)), 1);
	set((t.get(0) * v.get(1)) - (t.get(1) * v.get(0)), 2);
	// Return ourselves.
	return *this;
}

/**
 * 
 **/
template<typename T>
const Vector<T> Vector<T>::normalize(const Vector<T>& v) {
	Vector<T> n(v);
	return n.normalize();
}
template<typename T>
const Vector<T> normalize(const Vector<T>& v) {
	return Vector<T>::normalize(v);
}

/**
 * 
 **/
template<typename T>
const T Vector<T>::angle(const Vector<T>& a, const Vector<T>& b) {
	return a.angle(b);
}
template<typename T>
const T angle(const Vector<T>& a, const Vector<T>& b) {
	return Vector<T>::angle(a, b);
}

/**
 * 
 **/
template<typename T>
const T Vector<T>::inner(const Vector<T>& a, const Vector<T>& b) {
	return a.inner(b);
}
template<typename T>
const T inner(const Vector<T>& a, const Vector<T>& b) {
	return Vector<T>::inner(a, b);
}

/**
 * 
 **/
template<typename T>
const T Vector<T>::dot(const Vector<T>& a, const Vector<T>& b) {
	return Vector<T>::inner(a, b);
}
template<typename T>
const T dot(const Vector<T>& a, const Vector<T>& b) {
	return Vector<T>::dot(a, b);
}

/**
 * 
 **/
template<typename T>
const Vector<T> Vector<T>::outer(const Vector<T>& a, const Vector<T>& b) {
	return Matrix<T>::multiply(a, b);
}
template<typename T>
const Vector<T> outer(const Vector<T>& a, const Vector<T>& b) {
	return Vector<T>::outer(a, b);
}

/**
 * 
 **/
template<typename T>
const Vector<T> Vector<T>::cross(const Vector<T>& a, const Vector<T>& b) {
	Vector<T> tmp(a);
	return tmp.cross(b);
}
template<typename T>
const Vector<T> cross(const Vector<T>& a, const Vector<T>& b) {
	return Vector<T>::cross(a, b);
}

#endif