#ifndef COHESIONRULE_H
#define COHESIONRULE_H

#include "../boidrule.h"

#include "../boid.h"
#include "../boidsystem.h"

/**
 * 
 **/
template<typename T, int D>
class CohesionRule : public BoidRule<T, D> {
	Vector<T> calculate(void);
public:
	CohesionRule(Boid<T, D>*, BoidSystem<T, D>*);
};

/**
 * 
 **/
template<typename T, int D>
CohesionRule<T, D>::CohesionRule(Boid<T, D>* boid, BoidSystem<T, D>* bs)
	:	BoidRule<T, D>(boid, bs) {}

/**
 * 
 **/
template<typename T, int D>
Vector<T> CohesionRule<T, D>::calculate(void) {
	Vector<T> result(D);
	// Determine colony center.
	Position<T, D> center =
		_bs->getColonyCenter(_boid->getColonyID());
	// Determine vector to center.
	result = center - _boid->getPosition();
	// Return weighted and normalized vector to center.
	return _weight * result.normalize();
}

#endif