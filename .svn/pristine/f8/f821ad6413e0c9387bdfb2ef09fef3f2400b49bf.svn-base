#ifndef VELOCITY_H
#define VELOCITY_H

#include <cstdarg>

template<typename T, int D>
class Velocity : public Vector<T> {
public:
	Velocity(void);
	Velocity(T, T = T(), T = T(), T = T());
	Velocity(T, ...);
	T speed(void) const;
};

/**
 * 
 **/
template<typename T, int D>
Velocity<T, D>::Velocity(void)
	:	Vector<T>(D) {}

/**
 * 
 **/
template<typename T, int D>
Velocity<T, D>::Velocity(T a, T b, T c, T d)
	:	Vector<T>(D) {
	if(D >= 1) set(a, 0);
	if(D >= 2) set(b, 1);
	if(D >= 3) set(c, 2);
	if(D >= 4) set(d, 3);
}

/**
 * 
 **/
template<typename T, int D>
Velocity<T, D>::Velocity(T dim, ...)
	:	Vector<T>(D) {
	va_list va;
	va_start(va, dim);
	set(dim, 0);
	for(int i = 1; i < D; ++i) {
		T t = (T) va_arg(va, double);
		set(t, i);
	}
	va_end(va);
}

/**
 * 
 **/
template<typename T, int D>
T Velocity<T, D>::speed(void) const {
	return magnitude();
}

#endif