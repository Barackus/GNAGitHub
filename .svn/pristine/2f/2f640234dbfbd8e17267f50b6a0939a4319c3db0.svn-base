#include "Evolution.h"
#include <algorithm>
#include <iostream>
#include <fstream>
#include <time.h>
#include <map>

using namespace std;

Evolution::Evolution(){
	//given an initial neural network, evolve it using the settings below: 

	nrOfNodes = 30; //total number of nodes of a single Neural Network.
	genSize = 100; //the size of each generation.
	survivorSize = 10; //the number of survivors in each generation.
	nrOfGens = 100; //the total number of generations before the algorithm stops.
	allSlices = (genSize * (genSize+1)) / 2;

	vector<individual>::iterator git;
	vector<double>::iterator git2;

	//first, try to continue the evolution where you left off by trying to read EVOLUTION_RESULTS.txt.
	int StartFromGenerationNumber = readFromFile(pop);
	//first, we create a new, random population:
	
	//the evolution-loop.
	//timeStamp();

	for(int genNr = StartFromGenerationNumber;genNr <=nrOfGens;genNr++){
		// evaluate each individual. //takes the most amount of time by far
		//int iNr = 0;
		for(git = pop.begin(); git != pop.end(); ++git){
			git->fitness = 0;
			
			for(git2 = git->genes.begin(); git2 < git->genes.end(); ++git2 ){
				git->fitness += *git2; //the fitness is now just simply the weight. the higher the weight, the higher the score.
			}
		}
		// sort according to fitness.
		sort(pop.begin(),pop.end(),[](individual& a, individual& b) {return a.fitness > b.fitness;});
		
		// This loop is for printing out fitnesses or genes after they have been sorted.
		for(git = pop.begin(); git!= pop.end(); ++git){
			//cout << git->fitness;
			for(git2 = git->genes.begin(); git2 < git->genes.end(); ++git2 ){
				double content = * git2;
				//cout << content << ",";
			}
			//cout << "\n";
		}

		// possible mutation of survivors
		// fill the rest of the population with children of the survivors
		pop = makeBabies(pop);
		// possible mutation of children
		// print results to file, so when aborted, it can continue its work.
		writeToFile(genNr,pop);
	}
}

vector<Evolution::individual> Evolution::makeBabies(vector<individual> pop){
	vector<individual> newpop = pop; //copy of original pop

	vector<individual>::iterator git;
	int slice = genSize;
	int currentSlices = genSize;
	//child initialisation.
	vector<double> child;
	child.resize(nrOfNodes);
	//indices initialisation.
	vector<int> indices;
	indices.resize(nrOfNodes);
	for(int i = 0; i < nrOfNodes; ++i) indices.at(i) = i; //fill the vector with indices

	//child-making loop.
	for(int x = survivorSize; x < genSize; ++x){
		
		//ranking determines mating chance.
		int mate = int(rand() / RAND_MAX * allSlices);
		int otherMate = int(rand() / RAND_MAX * allSlices);
		int mateIndex = -1;
		int otherMateIndex = -1;
		slice = genSize;
		currentSlices = genSize;


		for(int y = 0; y < genSize; ++y){ //this loop is to link the random number to an actual index.
			if(mate < currentSlices){
				mateIndex = y;
			}
			if(otherMate < currentSlices){
				otherMateIndex = y;
			}
			if(mateIndex != -1 && otherMateIndex != -1) break;
			slice--;
			currentSlices += slice;
		}

		random_shuffle(indices.begin(),indices.end()); //shuffle the indices
		for(int i = 0; i< nrOfNodes/2; ++i) newpop.at(x).genes.at(i) = pop.at(mateIndex).genes.at(indices.at(i)); 
		for(int i = nrOfNodes/2; i<nrOfNodes; ++i) newpop.at(x).genes.at(i) = pop.at(otherMateIndex).genes.at(indices.at(i)); 
		
		mateIndex,otherMateIndex = -1;

	}
	return newpop;
}

void Evolution::writeToFile(int nr, vector<individual>& p){
	ofstream f;
	f.open ("EVOLUTION_RESULTS.txt");
	f << nr << endl;
	for(int i = 0; i<genSize; ++i){
		f << i << ": ";
		for(int j = 0; j<nrOfNodes; ++j) f << p[i].genes[j] << " ";
		f << endl;
	}
	f.close();
}

int Evolution::readFromFile(vector<individual>& p){
	ifstream f;

	f.open("EVOLUTION_RESULTS.txt");
	if(f.is_open()){
		int currentGeneration;
		f >> currentGeneration;
		cout << currentGeneration;

		f.close();
		return currentGeneration;
	}
	else {
		pop.resize(nrOfGens);
		vector<individual>::iterator git;
		vector<double>::iterator git2;
		for(git = pop.begin(); git != pop.end(); ++git){
			git->genes.resize(nrOfNodes);
			git->fitness = 0;
			for_each(git->genes.begin(), git->genes.end(), 
				[](double& n) { n = (double) rand() / RAND_MAX;});
		}
		return 1;
	}
	
	
	
	


	
	
}

Evolution::~Evolution(){

}

//returns a random genome.
std::vector<double> Evolution::createRandomGenome(){
	 std::vector<double> v;
	 v.assign(nrOfNodes,rand());
	 return v;
}


