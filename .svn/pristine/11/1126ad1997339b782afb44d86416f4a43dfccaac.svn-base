#ifndef ORIENTATION_H
#define ORIENTATION_H

template<typename T, int D>
class Orientation : public Vector<T> {
public:
	Orientation(void);
	Orientation(T, T = 0, T = 0, T = 0);
	Orientation(T, ...);
};

/**
 * 
 **/
template<typename T, int D>
Orientation<T, D>::Orientation(void)
	:	Vector<T>(D) {}

/**
 * 
 **/
template<typename T, int D>
Orientation<T, D>::Orientation(T a, T b, T c, T d)
	:	Vector<T>(D) {
	if(D >= 1) set(a, 0);
	if(D >= 2) set(b, 1);
	if(D >= 3) set(c, 2);
	if(D >= 4) set(d, 3);
}

/**
 * 
 **/
template<typename T, int D>
Orientation<T, D>::Orientation(T dim, ...)
	:	Vector<T>(D) {
	va_list va;
	va_start(va, dim);
	set(dim, 0);
	for(int i = 1; i < D; ++i)
		set(va_arg(va, T), i);
	va_end(va);
}

#endif