#ifndef GUI_H
#define GUI_H

#include <string>

#include "../World/src/world.h"
#include "../Boids/src/boids.h"

class GUI {
protected:
	GUI();
	~GUI();
public:
	static GUI* Instance(void);
	bool initialize(int argc, char **argv, DiscreteWorld2D*, BoidSystem2f*);
	void execute();

	void displayText(float x, float y, std::string text);
	void createGLUTMenus();

	inline static void drawCallback() {														_instance->draw(); }
	inline static void updateCallback() {													_instance->update(); }
	inline static void processMenuEventsCallback(int option) {								_instance->processMenuEvents(option); }
	inline static void windowResizeCallback (int x, int y) {								_instance->windowResize(x, y); }
	inline static void mouseMotionHandlerCallback(int mx, int my) {							_instance->mouseMotionHandler(mx, my); }
	inline static void mouseInputHandlerCallback(int button, int state, int mx, int my) {	_instance->mouseInputHandler(button, state, mx, my); }
	inline static void keyInputHandlerCallback(unsigned char key, int x, int y) {			_instance->keyInputHandler(key, x, y); }

	void draw();
	void update();
	void processMenuEvents(int);
	void windowResize (int, int);
	void mouseMotionHandler(int, int);
	void mouseInputHandler(int, int, int, int);
	void keyInputHandler(unsigned char, int, int);

	void drawWorld();
	void drawBombs();
	void drawBoids();
	void drawMouse();

protected:
	int					_screenwidth;
	int					_screenheight;
	DiscreteWorld2D*	_world;
	BoidSystem2f*		_bs;
	int					_frame;
	int					_mouseX;
	int					_mouseY;
	bool				_mouseEnabled;

private:
	static GUI* _instance;
};
#endif