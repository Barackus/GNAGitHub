#include "overmindfitnessfunctor.h"

#define CYCLES	3600 // 5 minutes.
#define DEAD	-10
#define ALIVE	5
#define SAVED	20

/**
 * 
 **/
OvermindFitnessFunctor::OvermindFitnessFunctor(DiscreteWorld2D* world, BoidSystem2f* bs, MLPerceptron5d* mlp)
	:	_world(world),
		_bs(bs),
		_mlp(mlp) {}

/**
 * 
 **/
double OvermindFitnessFunctor::operator()(individual& ind) {
	// Prepare multilayer perceptron.
	_mlp->setWeights(ind.genes);
	// Prepare boid system.
	_bs->reset();
	// Run the trial.
	for(int i = 0; i < CYCLES; ++i) {
		Vectord input(84);
		//Read positions for brain.
		vector<Boid<float, 2>*> _Boids = _bs->getBoids();
		for(unsigned int i = 0; i < _Boids.size(); ++i){
			input.fill(_Boids[i]->getPosition()->get(0),false); //x position
			input.fill(_Boids[i]->getPosition()->get(1),false); //y position
		}
		// the first safezone position.
		input.fill(_world->getSafezones()->at(0)->get(0),false);// x position of safezone
		input.fill(_world->getSafezones()->at(0)->get(1),false);// x position of safezone

		// the first bomb position.
		input.fill(_world->getBombs()->at(0).getPosition().get(0));// x position of bomb
		input.fill(_world->getBombs()->at(0).getPosition().get(1));// x position of bomb
		
			/*
		// think.
		Vectord output = _mlp->process(input);
		// Update brainRule.
			_bs->getBoids()[1]->addRule();*/
		// Update boids.
		_bs->update();
	}
	// Evaluate trial.
	int total = _bs->countBoids(NEUTRAL);
	int alive = _bs->countBoids(NEUTRAL, true);
	int dead = total - alive;
	int saved = 0;
	int score = dead * DEAD + alive * ALIVE + saved * SAVED;
	// Casualties (-10)
	// Total health (100 * total / begin)
	// Survivors (+5)
	// Rescued (+20)
	return double(score);
}