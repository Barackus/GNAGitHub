#ifndef ALIGNMENTRULE_H
#define ALIGNMENTRULE_H

#define ALIGNMENT_RADIUS	4

#include "../boidrule.h"

#include "../boid.h"
#include "../boidsystem.h"

/**
 * 
 **/
template<typename T, int D>
class AlignmentRule : public BoidRule<T, D> {
	Vector<T> calculate(void);
public:
	AlignmentRule(Boid<T, D>*, BoidSystem<T, D>*);
};

/**
 * 
 **/
template<typename T, int D>
AlignmentRule<T, D>::AlignmentRule(Boid<T, D>* boid, BoidSystem<T, D>* bs)
	:	BoidRule<T, D>(boid, bs) {}

/**
 * 
 **/
template<typename T, int D>
Vector<T> AlignmentRule<T, D>::calculate(void) {
	Vector<T> result(D);
	// Get closest neighbors.
	std::vector<Boid<T, D>*> neighbors =
		_bs->getBoidsNear(_boid->getPosition(), ALIGNMENT_RADIUS);
	// Calculate average orientation.
	std::vector<Boid<T, D>*>::iterator it;
	for(it = neighbors.begin(); it != neighbors.end(); ++it)
		result += (*it)->getVelocity();
	// Return normalized and weighted alignment vector.
	return _weight * result.normalize();
}

#endif