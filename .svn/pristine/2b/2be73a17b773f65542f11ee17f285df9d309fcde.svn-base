#ifndef BOMBRULE_H
#define BOMBRULE_H

#define FEAR_WEIGHT	5.00f
#define FEAR_RADIUS	3.0f
#define FEAR_FACTOR	0.10f

#include "../boidrule.h"

#include "../boid.h"
#include "../boidsystem.h"

#include "../../../World/src/world.h"
#include "../../../World/src/bomb.h"

/**
 * 
 **/
template<typename T, int D>
class BombRule : public BoidRule<T, D> {
private:
	DiscreteWorld<D>* _world;
	Vector<T>* calculate(void);
public:
	BombRule(Boid<T, D>*, BoidSystem<T, D>*, DiscreteWorld<D>*);
};

/**
 * 
 **/
template<typename T, int D>
BombRule<T, D>::BombRule(Boid<T, D>* boid, BoidSystem<T, D>* bs, DiscreteWorld<D>* world )
	:	BoidRule<T, D>(boid, bs, FEAR_WEIGHT),
		_world(world) {}

/**
 * 
 **/
template<typename T, int D>
Vector<T>* BombRule<T, D>::calculate(void) {
	_result->fill(0);
	// Get closest neighbors.
	std::vector<Bomb<T, D>> bombs = *_world->getBombs();

	// Calculate escape vector.
	std::vector<Bomb<T, D>>::iterator it;
	for(it = bombs.begin(); it != bombs.end(); ++it) {
		Vector<T> dist = *_boid->getPosition() - (*it).getPosition();
		if(!dist.isNil()) {
			T factor = (T(FEAR_RADIUS) - dist.magnitude()) / T(FEAR_RADIUS);
			factor *= factor;
			if(factor < 0) factor = 0;
			_result->add(dist.normalize(factor));
		}
	}
	// Return normalized and weighted escape vector.
	if(!_result->isNil())
		_result->normalize(_weight);
	T handicap = _boid->getHandicap() + _result->magnitude() * FEAR_FACTOR;
	if(handicap > 1)
		handicap = 1;
	_boid->setHandicap(handicap);
	return _result;
}

#endif